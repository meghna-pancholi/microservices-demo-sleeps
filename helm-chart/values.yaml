# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for onlineboutique.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

images:
  repository: meghnapancholi/online-boutique
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

serviceAccounts:
  # Specifies whether service accounts should be created.
  create: true
  # Annotations to add to the service accounts.
  annotations: {}
  # Annotations to add only for the cartservice app. This allows to follow the least privilege principle where only cartservice needs to connect to external database for example via Workload Identity.
  annotationsOnlyForCartservice: false

networkPolicies:
  # Specifies if the NetworkPolicies are created or not. If true, one fine granular NetworkPolicy per app is created.
  create: false

sidecars:
  # Specifies if the Sidecars are created or not. If true, one fine granular Sidecar per app is created.
  create: false

authorizationPolicies:
  # Specifies if the AuthorizationPolicies are created or not. If true, one fine granular AuthorizationPolicy per app is created.
  create: false

opentelemetryCollector:
  create: false
  name: opentelemetrycollector
  # Specifies the project id for the otel collector. If set as "PROJECT_ID" (default value), an initContainer will automatically retrieve the project id value from the metadata server.
  projectId: "PROJECT_ID"

googleCloudOperations:
  profiler: false
  tracing: false
  metrics: false

seccompProfile:
  enable: false
  type: RuntimeDefault

securityContext:
  enable: true

# Request hedging configuration for reducing tail latency
requestHedging:
  # Enable request hedging globally
  enabled: true
  # Default hedging configuration
  default:
    initial_requests: 1
    additional_request_chance:
      numerator: 1
      denominator: 1
    hedge_on_per_try_timeout: true
    max_requests: 2
  # Service-specific hedging configurations
  services:
    # Frontend to critical services
    frontend:
      productcatalogservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
      recommendationservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
      cartservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
    # Checkout service to its dependencies
    checkoutservice:
      cartservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
      productcatalogservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
      currencyservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2
    # Recommendation service to product catalog
    recommendationservice:
      productcatalogservice:
        enabled: true
        initial_requests: 1
        additional_request_chance:
          numerator: 1
          denominator: 1
        hedge_on_per_try_timeout: true
        max_requests: 2

adService:
  create: true
  name: adservice
  port: 9555
  image:
    repository: meghnapancholi/online-boutique
    tag: adservice-sleep
  # Specifies an extra latency to any request on adservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "adservice.local"
  resources:
    requests:
      cpu: 200m
      memory: 180Mi
    limits:
      cpu: 300m
      memory: 500Mi

cartService:
  create: true
  name: cartservice
  port: 7070
  image:
    repository: meghnapancholi/online-boutique
    tag: cartservice-sleep
  # Number of replicas for cartservice
  replicas: 2
  # Extra latency configuration for each replica
  replicaConfigs:
    - name: cartservice-replica-1
      extraLatency: "0ms"
    - name: cartservice-replica-2
      extraLatency: "10s"
  virtualService:
    create: true
    hosts:
    - "cartservice.local"
  resources:
    requests:
      cpu: 200m
      memory: 64Mi
    limits:
      cpu: 300m
      memory: 128Mi

checkoutService:
  create: true
  name: checkoutservice
  port: 5050
  image:
    repository: meghnapancholi/online-boutique
    tag: checkoutservice-sleep
  # Specifies an extra latency to any request on checkoutservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "checkoutservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

currencyService:
  create: true
  name: currencyservice
  port: 7000
  image:
    repository: meghnapancholi/online-boutique
    tag: currencyservice-sleep
  # Specifies an extra latency to any request on currencyservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "currencyservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

emailService:
  create: true
  name: emailservice
  port: 5000
  image:
    repository: meghnapancholi/online-boutique
    tag: emailservice-sleep
  # Specifies an extra latency to any request on emailservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "emailservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

frontend:
  create: true
  name: frontend
  port: 80
  image:
    repository: meghnapancholi/online-boutique
    tag: frontend-sleep
  externalService: true
  cymbalBranding: false
  # One of: local, gcp, aws, azure, onprem, alibaba. When not set, defaults to "local" unless running in GKE, otherwise auto-sets to gcp.
  platform: local
  singleSharedSession: false
  # Specifies an extra latency to any request on frontend, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "*"
    gateway:
      name: asm-ingressgateway
      namespace: asm-ingress
      labelKey: asm
      labelValue: ingressgateway
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

loadGenerator:
  create: true
  name: loadgenerator
  port: 80
  checkFrontendInitContainer: true
  # Specifies the number of users generated by the loadgenerator.
  users: "10"
  # image:
  #   repository: us-central1-docker.pkg.dev/google-samples/microservices-demo/loadgenerator
  #   tag: v0.10.2
  image:
    repository: meghnapancholi/online-boutique
    tag: loadgenerator
  resources:
    requests:
      cpu: 300m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

paymentService:
  create: true
  name: paymentservice
  port: 50051
  image:
    repository: meghnapancholi/online-boutique
    tag: paymentservice-sleep
  # Specifies an extra latency to any request on paymentservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "paymentservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

productCatalogService:
  create: true
  name: productcatalogservice
  port: 3550
  image:
    repository: meghnapancholi/online-boutique
    tag: productcatalogservice-sleep
  # Specifies an extra latency to any request on productcatalogservice, by default no extra latency.
  extraLatency: "0ms"
  # Specifies whether to use busy spin instead of sleep for extra latency
  useBusySpin: false
  virtualService:
    create: true
    hosts:
    - "productcatalogservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

recommendationService:
  create: true
  name: recommendationservice
  port: 8080
  image:
    repository: meghnapancholi/online-boutique
    tag: recommendationservice-sleep
  virtualService:
    create: true
    hosts:
    - "recommendationservice.local"
  extraLatency: "0ms"
  resources:
    requests:
      cpu: 100m
      memory: 220Mi
    limits:
      cpu: 200m
      memory: 450Mi

shippingService:
  create: true
  name: shippingservice
  port: 50051
  image:
    repository: meghnapancholi/online-boutique
    tag: shippingservice-sleep
  # Specifies an extra latency to any request on shippingservice, by default no extra latency.
  extraLatency: "0ms"
  virtualService:
    create: true
    hosts:
    - "shippingservice.local"
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

cartDatabase:
  # Specifies the type of the cartservice's database, could be either redis or spanner.
  type: redis
  connectionString: "redis-cart:6379"
  inClusterRedis:
    create: true
    name: redis-cart
    # Uses the public redis image from Docker Hub, otherwise will use the images.repository.
    publicRepository: true
  externalRedisTlsOrigination:
    enable: false
    name: exernal-redis-tls-origination
    endpointAddress: ""
    endpointPort: ""
    certificate: ""

# @TODO: This service is not currently available in Helm.
# https://github.com/GoogleCloudPlatform/microservices-demo/tree/main/kustomize/components/shopping-assistant
shoppingAssistantService:
  create: false
  name: shoppingassistantservice
  port: 80

